'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var cors = _interopDefault(require('cors'));
var express = _interopDefault(require('express'));
var mongoose$1 = _interopDefault(require('mongoose'));
var bodyParser = _interopDefault(require('body-parser'));
var apolloServerExpress = require('apollo-server-express');
var apolloServer = require('apollo-server');

var bookSchema = apolloServer.gql`
	type Book {
		id: ID!
		title: String!
		author: String!
	}

	extend type Query {
		book(id: ID!): Book!
		books: [Book!]!
	}

	extend type Mutation {
		createBook(title: String!, author: String!): Book!
	}
`;

const linkSchema = apolloServer.gql`
	type Query {
		_: Boolean
	}
	type Mutation {
		_: Boolean
	}
`;

var schemas = [linkSchema, bookSchema];

var bookResolver = {
  Query: {
    book: async (parent, { id }, { models: { bookModel } }, info) => {
      const book = await bookModel.findById(id).exec();
      return book;
    },
    books: async (parent, args, { models: { bookModel } }, info) => {
      const books = await bookModel.find().exec();
      return books;
    },
  },
  Mutation: {
    createBook: async (parent, { title, author }, { models: { bookModel } }, info) => {
      const book = await bookModel.create({ title, author });
      return book;
    },
  },
};

var resolvers = [bookResolver];

const mongoose = require('mongoose');
const { Schema } = mongoose;

const bookSchema$1 = new Schema({
	title: String,
	author: String
});

var bookModel = mongoose.model('Book', bookSchema$1);

const app = express();
app.use(cors());
app.use(bodyParser.json());

const server = new apolloServerExpress.ApolloServer({
	typeDefs: schemas,
	resolvers,
	context: async () => {
		return {
			models: {
				bookModel
			}
		};
	}
});

server.applyMiddleware({ app, path: '/graphql' });

if (process.env.NODE_ENV === 'production') {
	app.use(express.static('client/build'));

	const path = require('path');
	app.get('*', (req, res) => {
		res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'));
	});
}

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
	mongoose$1.connect(
		process.env.MONGODB_URI || `mongodb://localhost:27017/graphql`,
		{
			useCreateIndex: true,
			useNewUrlParser: true,
			useUnifiedTopology: true
		}
	);

	console.log(`app running on port: ${PORT}`);
});
